from datetime import datetime
from telebot import types
from database.db import add_task, get_tasks, mark_done, delete_task, update_task_text
from utils.keyboards import main_menu
import logging


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
user_edit_state = {}
# —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–¥–∞—á
user_bulk_state = {}



def register(bot):
    # /start
    @bot.message_handler(commands=['start'])
    def handle_start(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª /start')
        try:
            bot.send_message(
                message.chat.id,
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π ToDo-–±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è",
                reply_markup=main_menu()
            )
        except Exception as e:
            # print(f"[ERROR handle_start] {e}")
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã start: {e}')
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start.")


    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
    @bot.message_handler(func=lambda msg: msg.text == 'üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
    def handle_list_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫')
        try:
            user_id = message.chat.id
            tasks = get_tasks(user_id)

            if not tasks:
                logging.info(f'User {user_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
                bot.send_message(user_id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                return

            text = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n"
            for i, (task_id, task_text, task_date) in enumerate(tasks, 1):
                text += f"{i}. {task_text} ({task_date})\n"

            bot.send_message(user_id, text)
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫: {e}')
            bot.send_message(user_id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.")


    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—à–∞–≥ 1 ‚Äî –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞)
    @bot.message_handler(func=lambda msg: msg.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    def handle_add_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É')
        try:
            bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
            bot.register_next_step_handler(message, process_task_text)
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}')
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")


    # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—à–∞–≥ 2 ‚Äî –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)
    def process_task_text(message):
        try:
            user_id = message.chat.id
            task_text = message.text.strip()
            from datetime import datetime
            today = datetime.now().strftime('%d.%m.%Y %H:%M')

            add_task(user_id, task_text, today)
            bot.send_message(user_id, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
            
            
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á (—à–∞–≥ 1 ‚Äî –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞)
    @bot.message_handler(func=lambda msg: msg.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á')
    def handle_bulk_add_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á')
        user_id = message.chat.id
        user_bulk_state[user_id] = True
        bot.send_message(user_id, 'üìù –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:')
        
        
    # –î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á (—à–∞–≥ 2 ‚Äî –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)
    @bot.message_handler(func=lambda msg: msg.from_user.id in user_bulk_state)
    def process_bulk_add(message):
        user_id = message.from_user.id
        try:
            tasks = [task.strip() for task in message.text.split('\n') if task.strip()] # –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞
            for task_text in tasks:
                    add_task(user_id, task_text.strip(), datetime.now().strftime('%d.%m.%Y %H:%M'))
            bot.send_message(user_id, f'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(tasks)} –∑–∞–¥–∞—á!')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}')
            bot.send_message(user_id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á')
        finally:
            user_bulk_state.pop(user_id, None)
                

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É
    @bot.message_handler(func=lambda msg: msg.text == "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É")
    def handle_done_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É')
        try:
            user_id = message.chat.id
            tasks = get_tasks(user_id)

            if not tasks:
                bot.send_message(user_id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
                return

            text = "‚úÖ –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
            markup = types.InlineKeyboardMarkup()
            for i, (task_id, task_text, task_date) in enumerate(tasks, 1):
                markup.add(types.InlineKeyboardButton(f"{i}. {task_text}", callback_data=f"done_{task_id}"))

            bot.send_message(user_id, text, reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
    
    
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –í–´–ü–û–õ–ù–ò–¢–¨
    @bot.callback_query_handler(func=lambda call: call.data.startswith('done_'))
    def hendle_done_callback(call):
        try:
            task_id = int(call.data.split('_')[1])
            mark_done(task_id)
            bot.answer_callback_query(call.id, '‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
            bot.send_message(call.message.chat.id, "–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è ‚úÖ")
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {e}')
            bot.answer_callback_query(call.id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')

            
    # –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
    @bot.message_handler(func=lambda msg: msg.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    def handle_delete_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É')
        try:
            user_id = message.chat.id
            tasks = get_tasks(user_id)

            if not tasks:
                bot.send_message(user_id, "üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                return

            text = "üóë –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            markup = types.InlineKeyboardMarkup()
            for i, (task_id, task_text, task_date) in enumerate(tasks, 1):
                markup.add(types.InlineKeyboardButton(f"{i}. {task_text}", callback_data=f"delete_{task_id}"))

            bot.send_message(user_id, text, reply_markup=markup)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            bot.send_message(message.chat.id, "‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")


    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –£–î–ê–õ–ò–¢–¨
    @bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
    def hendle_delete_callback(call):
        try:
            task_id = int(call.data.split('_')[1])
            delete_task(task_id)
            bot.answer_callback_query(call.id, "üóë –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
            bot.send_message(call.message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ üóë")
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}')
            bot.answer_callback_query(call.id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
            
            
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É
    @bot.message_handler(func=lambda msg: msg.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')
    def handle_edit_button(message):
        logging.info(f'User {message.chat.id} –Ω–∞–∂–∞–ª –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É')
        try:
            user_id = message.chat.id
            tasks = get_tasks(user_id)
            
            if not tasks:
                bot.send_message(user_id, 'üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.')
                return
            
            text = '‚úèÔ∏è –í—ã–±–µ—Ä–∏ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n'
            markup = types.InlineKeyboardMarkup()
            for i, (task_id, task_text, task_date) in enumerate(tasks, 1):
                markup.add(types.InlineKeyboardButton(f'{i}. {task_text}', callback_data=f'edit_{task_id}'))
            
            bot.send_message(user_id, text, reply_markup=markup)
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {e}')
            bot.send_message(message.chat.id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.')
            
            
    # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨
    @bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
    def hendle_edit_callback(call):
        try:
            task_id = int(call.data.split('_')[1])
            bot.answer_callback_query(call.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            user_edit_state[call.from_user.id] = task_id
        except Exception as e:
            logging(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}')
            bot.answer_callback_query(call.id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏')
    
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    @bot.message_handler(func=lambda msg: msg.from_user.id in user_edit_state)
    def process_edit_text(message):
        try:
            task_id = user_edit_state.pop(message.from_user.id)
            new_text = message.text
            update_task_text(task_id, new_text)
            bot.send_message(message.chat.id, f'‚úèÔ∏è –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {new_text}')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏: {e}')
            bot.send_message(message.chat.id, '‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏.')
